<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<title>SVG Drawing Tool</title>
<style>
  :root { --border:#333; --soft:#e5e7eb; }
  body { font-family: system-ui, Arial, sans-serif; margin: 24px; background:#fafafa; }
  h2 { margin: 0 0 10px; }
  .toolbar {
    display:flex; flex-wrap:wrap; gap:10px; align-items:center;
    padding:10px; border:2px solid var(--border); border-bottom:none; border-radius:12px 12px 0 0;
    background:white;
  }
  .tool-group { display:flex; align-items:center; gap:6px; }
  .btn {
    padding:8px 12px; border:1px solid #999; background:#fff; cursor:pointer; border-radius:8px;
  }
  .btn:active { transform: translateY(1px); }
  .canvas-wrap {
    border:2px solid var(--border); border-radius:0 0 12px 12px; background:white;
    width:min(900px, 95vw);
  }
  svg { width:100%; height:480px; background:#fff; display:block; }
  .hint { color:#555; font-size:12px; padding:8px 12px; border-top:1px dashed var(--soft); }
</style>
</head>
<body>
  <h2>SVG Drawing Tool</h2>

  <div class="toolbar">
    <div class="tool-group">
      <label for="mode"><strong>Mode:</strong></label>
      <select id="mode">
        <option value="freehand">Freehand</option>
        <option value="line">Line</option>
        <option value="rect">Rectangle</option>
      </select>
    </div>

    <div class="tool-group">
      <label for="color"><strong>Color:</strong></label>
      <input id="color" type="color" value="#1e90ff" />
    </div>

    <div class="tool-group">
      <label for="width"><strong>Width:</strong></label>
      <input id="width" type="range" min="1" max="20" value="3"/>
      <span id="widthVal">3</span>px
    </div>

    <button id="undo" class="btn">Undo</button>
    <button id="clear" class="btn">Clear</button>
  </div>

  <div class="canvas-wrap">
    <svg id="board" viewBox="0 0 900 480">
      <!-- drawn items will be appended here -->
    </svg>
    <div class="hint">Tip: choose "Freehand" and draw ‚ÄúByteXL‚Äù like in the example üôÇ</div>
  </div>

<script>
(() => {
  const svg = document.getElementById('board');
  const modeSel = document.getElementById('mode');
  const colorInp = document.getElementById('color');
  const widthInp = document.getElementById('width');
  const widthVal = document.getElementById('widthVal');
  const btnUndo = document.getElementById('undo');
  const btnClear = document.getElementById('clear');

  widthInp.addEventListener('input', () => widthVal.textContent = widthInp.value);

  let drawing = false;
  let currentEl = null;
  let start = { x:0, y:0 };

  function svgPoint(evt) {
    const rect = svg.getBoundingClientRect();
    const clientX = evt.touches ? evt.touches[0].clientX : evt.clientX;
    const clientY = evt.touches ? evt.touches[0].clientY : evt.clientY;
    const x = clientX - rect.left;
    const y = clientY - rect.top;
    // map to viewBox coordinates
    const viewBox = svg.viewBox.baseVal;
    return {
      x: (x / rect.width) * viewBox.width + viewBox.x,
      y: (y / rect.height) * viewBox.height + viewBox.y
    };
  }

  function startDraw(evt) {
    drawing = true;
    const p = svgPoint(evt);
    start = p;

    const stroke = colorInp.value;
    const width = widthInp.value;

    const mode = modeSel.value;
    if (mode === 'freehand') {
      currentEl = document.createElementNS('http://www.w3.org/2000/svg', 'path');
      currentEl.setAttribute('d', `M ${p.x} ${p.y}`);
      currentEl.setAttribute('fill', 'none');
      currentEl.setAttribute('stroke', stroke);
      currentEl.setAttribute('stroke-width', width);
      currentEl.setAttribute('stroke-linecap', 'round');
      currentEl.setAttribute('stroke-linejoin', 'round');
      svg.appendChild(currentEl);
    } else if (mode === 'line') {
      currentEl = document.createElementNS('http://www.w3.org/2000/svg', 'line');
      currentEl.setAttribute('x1', p.x);
      currentEl.setAttribute('y1', p.y);
      currentEl.setAttribute('x2', p.x);
      currentEl.setAttribute('y2', p.y);
      currentEl.setAttribute('stroke', stroke);
      currentEl.setAttribute('stroke-width', width);
      currentEl.setAttribute('stroke-linecap', 'round');
      svg.appendChild(currentEl);
    } else if (mode === 'rect') {
      currentEl = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
      currentEl.setAttribute('x', p.x);
      currentEl.setAttribute('y', p.y);
      currentEl.setAttribute('width', 0);
      currentEl.setAttribute('height', 0);
      currentEl.setAttribute('fill', 'none');
      currentEl.setAttribute('stroke', stroke);
      currentEl.setAttribute('stroke-width', width);
      svg.appendChild(currentEl);
    }

    evt.preventDefault();
  }

  function moveDraw(evt) {
    if (!drawing || !currentEl) return;
    const p = svgPoint(evt);
    const mode = modeSel.value;

    if (mode === 'freehand') {
      const d = currentEl.getAttribute('d');
      currentEl.setAttribute('d', `${d} L ${p.x} ${p.y}`);
    } else if (mode === 'line') {
      currentEl.setAttribute('x2', p.x);
      currentEl.setAttribute('y2', p.y);
    } else if (mode === 'rect') {
      const x = Math.min(start.x, p.x);
      const y = Math.min(start.y, p.y);
      const w = Math.abs(p.x - start.x);
      const h = Math.abs(p.y - start.y);
      currentEl.setAttribute('x', x);
      currentEl.setAttribute('y', y);
      currentEl.setAttribute('width', w);
      currentEl.setAttribute('height', h);
    }
    evt.preventDefault();
  }

  function endDraw() {
    drawing = false;
    currentEl = null;
  }

  // Mouse
  svg.addEventListener('mousedown', startDraw);
  svg.addEventListener('mousemove', moveDraw);
  window.addEventListener('mouseup', endDraw);

  // Touch (mobile)
  svg.addEventListener('touchstart', startDraw, { passive:false });
  svg.addEventListener('touchmove', moveDraw, { passive:false });
  window.addEventListener('touchend', endDraw);

  // Undo last shape
  btnUndo.addEventListener('click', () => {
    const last = svg.lastElementChild;
    if (last) svg.removeChild(last);
  });

  // Clear all
  btnClear.addEventListener('click', () => {
    while (svg.lastElementChild) svg.removeChild(svg.lastElementChild);
  });
})();
</script>
</body>
</html>
